import { BaseBlock, BlockInfo, SingleTransaction as Transaction, TransactionStatus } from 'vineyard-blockchain';
import { Collection, Modeler } from 'vineyard-data/legacy';
import { Model, TransactionToSave } from './deposit-monitor-manager';
import { BlockDao, LastBlockDao, LastBlockDaoOld, MonitorDaoOld, TransactionDaoOld } from './types';
export declare function getTransactionByTxidAndCurrency(transactionCollection: Collection<Transaction>, txid: string, currency: number): Promise<Transaction | undefined>;
export declare function saveTransaction(transactionCollection: Collection<Transaction>, transaction: TransactionToSave): Promise<Transaction>;
export declare function setStatus(transactionCollection: Collection<Transaction>, transaction: Transaction, status: TransactionStatus): Promise<Transaction>;
export declare function listPendingTransactions(ground: Modeler, transactionCollection: Collection<Transaction>, currency: number, maxBlockIndex: number): Promise<Transaction[]>;
export declare function getLastBlock(ground: Modeler, currency: number): Promise<BlockInfo | undefined>;
export declare function setLastBlock(ground: Modeler, currency: number, blockIndex: number): Promise<any>;
export declare function getLastBlockIndex(ground: Modeler, currency: number): Promise<number | undefined>;
export declare function setLastBlockIndex(ground: Modeler, currency: number, block: number): Promise<any>;
export declare function saveBlock(blockCollection: Collection<BlockInfo>, block: BaseBlock): Promise<BlockInfo>;
export declare function createBlockDao(model: Model): BlockDao;
export declare function createIndexedLastBlockDao(ground: Modeler, currency: number): LastBlockDao;
export declare function createLastBlockDao(ground: Modeler): LastBlockDaoOld;
export declare function createTransactionDao(model: Model): TransactionDaoOld;
export declare function createMonitorDao(model: Model): MonitorDaoOld;
